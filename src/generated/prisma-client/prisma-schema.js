module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCompany {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateInfluence {
  count: Int!
}

type AggregateKeyWord {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Company {
  id: ID!
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences(where: InfluenceWhereInput, orderBy: InfluenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Influence!]
  purchases(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  selles(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences: InfluenceCreateManyWithoutCompanyInput
  purchases: ProductCreateManyWithoutInputsInput
  selles: ProductCreateManyWithoutOutputsInput
}

input CompanyCreateManyWithoutPurchasesInput {
  create: [CompanyCreateWithoutPurchasesInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateManyWithoutSellesInput {
  create: [CompanyCreateWithoutSellesInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutInfluencesInput {
  create: CompanyCreateWithoutInfluencesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutInfluencesInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  purchases: ProductCreateManyWithoutInputsInput
  selles: ProductCreateManyWithoutOutputsInput
}

input CompanyCreateWithoutPurchasesInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences: InfluenceCreateManyWithoutCompanyInput
  selles: ProductCreateManyWithoutOutputsInput
}

input CompanyCreateWithoutSellesInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences: InfluenceCreateManyWithoutCompanyInput
  purchases: ProductCreateManyWithoutInputsInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  symbol_ASC
  symbol_DESC
  name_ASC
  name_DESC
  area_ASC
  area_DESC
  industry_ASC
  industry_DESC
  fullname_ASC
  fullname_DESC
  enname_ASC
  enname_DESC
  market_ASC
  market_DESC
  exchange_ASC
  exchange_DESC
  currType_ASC
  currType_DESC
  listStatus_ASC
  listStatus_DESC
  listDate_ASC
  listDate_DESC
  delistDate_ASC
  delistDate_DESC
  isHS_ASC
  isHS_DESC
  scope_ASC
  scope_DESC
  desc_ASC
  desc_DESC
}

type CompanyPreviousValues {
  id: ID!
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  enname: String
  enname_not: String
  enname_in: [String!]
  enname_not_in: [String!]
  enname_lt: String
  enname_lte: String
  enname_gt: String
  enname_gte: String
  enname_contains: String
  enname_not_contains: String
  enname_starts_with: String
  enname_not_starts_with: String
  enname_ends_with: String
  enname_not_ends_with: String
  market: String
  market_not: String
  market_in: [String!]
  market_not_in: [String!]
  market_lt: String
  market_lte: String
  market_gt: String
  market_gte: String
  market_contains: String
  market_not_contains: String
  market_starts_with: String
  market_not_starts_with: String
  market_ends_with: String
  market_not_ends_with: String
  exchange: String
  exchange_not: String
  exchange_in: [String!]
  exchange_not_in: [String!]
  exchange_lt: String
  exchange_lte: String
  exchange_gt: String
  exchange_gte: String
  exchange_contains: String
  exchange_not_contains: String
  exchange_starts_with: String
  exchange_not_starts_with: String
  exchange_ends_with: String
  exchange_not_ends_with: String
  currType: String
  currType_not: String
  currType_in: [String!]
  currType_not_in: [String!]
  currType_lt: String
  currType_lte: String
  currType_gt: String
  currType_gte: String
  currType_contains: String
  currType_not_contains: String
  currType_starts_with: String
  currType_not_starts_with: String
  currType_ends_with: String
  currType_not_ends_with: String
  listStatus: String
  listStatus_not: String
  listStatus_in: [String!]
  listStatus_not_in: [String!]
  listStatus_lt: String
  listStatus_lte: String
  listStatus_gt: String
  listStatus_gte: String
  listStatus_contains: String
  listStatus_not_contains: String
  listStatus_starts_with: String
  listStatus_not_starts_with: String
  listStatus_ends_with: String
  listStatus_not_ends_with: String
  listDate: String
  listDate_not: String
  listDate_in: [String!]
  listDate_not_in: [String!]
  listDate_lt: String
  listDate_lte: String
  listDate_gt: String
  listDate_gte: String
  listDate_contains: String
  listDate_not_contains: String
  listDate_starts_with: String
  listDate_not_starts_with: String
  listDate_ends_with: String
  listDate_not_ends_with: String
  delistDate: String
  delistDate_not: String
  delistDate_in: [String!]
  delistDate_not_in: [String!]
  delistDate_lt: String
  delistDate_lte: String
  delistDate_gt: String
  delistDate_gte: String
  delistDate_contains: String
  delistDate_not_contains: String
  delistDate_starts_with: String
  delistDate_not_starts_with: String
  delistDate_ends_with: String
  delistDate_not_ends_with: String
  isHS: String
  isHS_not: String
  isHS_in: [String!]
  isHS_not_in: [String!]
  isHS_lt: String
  isHS_lte: String
  isHS_gt: String
  isHS_gte: String
  isHS_contains: String
  isHS_not_contains: String
  isHS_starts_with: String
  isHS_not_starts_with: String
  isHS_ends_with: String
  isHS_not_ends_with: String
  scope: String
  scope_not: String
  scope_in: [String!]
  scope_not_in: [String!]
  scope_lt: String
  scope_lte: String
  scope_gt: String
  scope_gte: String
  scope_contains: String
  scope_not_contains: String
  scope_starts_with: String
  scope_not_starts_with: String
  scope_ends_with: String
  scope_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences: InfluenceUpdateManyWithoutCompanyInput
  purchases: ProductUpdateManyWithoutInputsInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input CompanyUpdateManyDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
}

input CompanyUpdateManyMutationInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
}

input CompanyUpdateManyWithoutPurchasesInput {
  create: [CompanyCreateWithoutPurchasesInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutPurchasesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutPurchasesInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithoutSellesInput {
  create: [CompanyCreateWithoutSellesInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutSellesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutSellesInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutInfluencesInput {
  create: CompanyCreateWithoutInfluencesInput
  update: CompanyUpdateWithoutInfluencesDataInput
  upsert: CompanyUpsertWithoutInfluencesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutInfluencesDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  purchases: ProductUpdateManyWithoutInputsInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input CompanyUpdateWithoutPurchasesDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences: InfluenceUpdateManyWithoutCompanyInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input CompanyUpdateWithoutSellesDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  influences: InfluenceUpdateManyWithoutCompanyInput
  purchases: ProductUpdateManyWithoutInputsInput
}

input CompanyUpdateWithWhereUniqueWithoutPurchasesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutPurchasesDataInput!
}

input CompanyUpdateWithWhereUniqueWithoutSellesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutSellesDataInput!
}

input CompanyUpsertWithoutInfluencesInput {
  update: CompanyUpdateWithoutInfluencesDataInput!
  create: CompanyCreateWithoutInfluencesInput!
}

input CompanyUpsertWithWhereUniqueWithoutPurchasesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutPurchasesDataInput!
  create: CompanyCreateWithoutPurchasesInput!
}

input CompanyUpsertWithWhereUniqueWithoutSellesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutSellesDataInput!
  create: CompanyCreateWithoutSellesInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  enname: String
  enname_not: String
  enname_in: [String!]
  enname_not_in: [String!]
  enname_lt: String
  enname_lte: String
  enname_gt: String
  enname_gte: String
  enname_contains: String
  enname_not_contains: String
  enname_starts_with: String
  enname_not_starts_with: String
  enname_ends_with: String
  enname_not_ends_with: String
  market: String
  market_not: String
  market_in: [String!]
  market_not_in: [String!]
  market_lt: String
  market_lte: String
  market_gt: String
  market_gte: String
  market_contains: String
  market_not_contains: String
  market_starts_with: String
  market_not_starts_with: String
  market_ends_with: String
  market_not_ends_with: String
  exchange: String
  exchange_not: String
  exchange_in: [String!]
  exchange_not_in: [String!]
  exchange_lt: String
  exchange_lte: String
  exchange_gt: String
  exchange_gte: String
  exchange_contains: String
  exchange_not_contains: String
  exchange_starts_with: String
  exchange_not_starts_with: String
  exchange_ends_with: String
  exchange_not_ends_with: String
  currType: String
  currType_not: String
  currType_in: [String!]
  currType_not_in: [String!]
  currType_lt: String
  currType_lte: String
  currType_gt: String
  currType_gte: String
  currType_contains: String
  currType_not_contains: String
  currType_starts_with: String
  currType_not_starts_with: String
  currType_ends_with: String
  currType_not_ends_with: String
  listStatus: String
  listStatus_not: String
  listStatus_in: [String!]
  listStatus_not_in: [String!]
  listStatus_lt: String
  listStatus_lte: String
  listStatus_gt: String
  listStatus_gte: String
  listStatus_contains: String
  listStatus_not_contains: String
  listStatus_starts_with: String
  listStatus_not_starts_with: String
  listStatus_ends_with: String
  listStatus_not_ends_with: String
  listDate: String
  listDate_not: String
  listDate_in: [String!]
  listDate_not_in: [String!]
  listDate_lt: String
  listDate_lte: String
  listDate_gt: String
  listDate_gte: String
  listDate_contains: String
  listDate_not_contains: String
  listDate_starts_with: String
  listDate_not_starts_with: String
  listDate_ends_with: String
  listDate_not_ends_with: String
  delistDate: String
  delistDate_not: String
  delistDate_in: [String!]
  delistDate_not_in: [String!]
  delistDate_lt: String
  delistDate_lte: String
  delistDate_gt: String
  delistDate_gte: String
  delistDate_contains: String
  delistDate_not_contains: String
  delistDate_starts_with: String
  delistDate_not_starts_with: String
  delistDate_ends_with: String
  delistDate_not_ends_with: String
  isHS: String
  isHS_not: String
  isHS_in: [String!]
  isHS_not_in: [String!]
  isHS_lt: String
  isHS_lte: String
  isHS_gt: String
  isHS_gte: String
  isHS_contains: String
  isHS_not_contains: String
  isHS_starts_with: String
  isHS_not_starts_with: String
  isHS_ends_with: String
  isHS_not_ends_with: String
  scope: String
  scope_not: String
  scope_in: [String!]
  scope_not_in: [String!]
  scope_lt: String
  scope_lte: String
  scope_gt: String
  scope_gte: String
  scope_contains: String
  scope_not_contains: String
  scope_starts_with: String
  scope_not_starts_with: String
  scope_ends_with: String
  scope_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  influences_every: InfluenceWhereInput
  influences_some: InfluenceWhereInput
  influences_none: InfluenceWhereInput
  purchases_every: ProductWhereInput
  purchases_some: ProductWhereInput
  purchases_none: ProductWhereInput
  selles_every: ProductWhereInput
  selles_some: ProductWhereInput
  selles_none: ProductWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
  symbol: String
  name: String
}

scalar DateTime

enum Direction {
  GOOD
  BAD
}

type Event {
  id: ID!
  title: String!
  src: String!
  srcKind: SrcKind!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime!
  content: String!
  keyWords(where: KeyWordWhereInput, orderBy: KeyWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeyWord!]
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  src: String!
  srcKind: SrcKind!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime!
  content: String!
  keyWords: KeyWordCreateManyInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  src_ASC
  src_DESC
  srcKind_ASC
  srcKind_DESC
  reportTime_ASC
  reportTime_DESC
  happen_ASC
  happen_DESC
  happenTime_ASC
  happenTime_DESC
  content_ASC
  content_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  src: String!
  srcKind: SrcKind!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime!
  content: String!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  title: String
  src: String
  srcKind: SrcKind
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  content: String
  keyWords: KeyWordUpdateManyInput
}

input EventUpdateManyMutationInput {
  title: String
  src: String
  srcKind: SrcKind
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  content: String
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  src: String
  src_not: String
  src_in: [String!]
  src_not_in: [String!]
  src_lt: String
  src_lte: String
  src_gt: String
  src_gte: String
  src_contains: String
  src_not_contains: String
  src_starts_with: String
  src_not_starts_with: String
  src_ends_with: String
  src_not_ends_with: String
  srcKind: SrcKind
  srcKind_not: SrcKind
  srcKind_in: [SrcKind!]
  srcKind_not_in: [SrcKind!]
  reportTime: DateTime
  reportTime_not: DateTime
  reportTime_in: [DateTime!]
  reportTime_not_in: [DateTime!]
  reportTime_lt: DateTime
  reportTime_lte: DateTime
  reportTime_gt: DateTime
  reportTime_gte: DateTime
  happen: TimeKind
  happen_not: TimeKind
  happen_in: [TimeKind!]
  happen_not_in: [TimeKind!]
  happenTime: DateTime
  happenTime_not: DateTime
  happenTime_in: [DateTime!]
  happenTime_not_in: [DateTime!]
  happenTime_lt: DateTime
  happenTime_lte: DateTime
  happenTime_gt: DateTime
  happenTime_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  keyWords_every: KeyWordWhereInput
  keyWords_some: KeyWordWhereInput
  keyWords_none: KeyWordWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

enum FactorKind {
  ASSET
  DEBT
  EQUITY
  INCOME
  COST
  FEE
  BRAND
}

type Influence {
  id: ID!
  keywords(where: KeyWordWhereInput, orderBy: KeyWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeyWord!]
  kind: FactorKind!
  name: String!
  desc: String!
  company: Company!
  dierction: Direction!
}

type InfluenceConnection {
  pageInfo: PageInfo!
  edges: [InfluenceEdge]!
  aggregate: AggregateInfluence!
}

input InfluenceCreateInput {
  id: ID
  keywords: KeyWordCreateManyInput
  kind: FactorKind!
  name: String!
  desc: String!
  company: CompanyCreateOneWithoutInfluencesInput!
  dierction: Direction!
}

input InfluenceCreateManyWithoutCompanyInput {
  create: [InfluenceCreateWithoutCompanyInput!]
  connect: [InfluenceWhereUniqueInput!]
}

input InfluenceCreateWithoutCompanyInput {
  id: ID
  keywords: KeyWordCreateManyInput
  kind: FactorKind!
  name: String!
  desc: String!
  dierction: Direction!
}

type InfluenceEdge {
  node: Influence!
  cursor: String!
}

enum InfluenceOrderByInput {
  id_ASC
  id_DESC
  kind_ASC
  kind_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  dierction_ASC
  dierction_DESC
}

type InfluencePreviousValues {
  id: ID!
  kind: FactorKind!
  name: String!
  desc: String!
  dierction: Direction!
}

input InfluenceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  kind: FactorKind
  kind_not: FactorKind
  kind_in: [FactorKind!]
  kind_not_in: [FactorKind!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  dierction: Direction
  dierction_not: Direction
  dierction_in: [Direction!]
  dierction_not_in: [Direction!]
  AND: [InfluenceScalarWhereInput!]
  OR: [InfluenceScalarWhereInput!]
  NOT: [InfluenceScalarWhereInput!]
}

type InfluenceSubscriptionPayload {
  mutation: MutationType!
  node: Influence
  updatedFields: [String!]
  previousValues: InfluencePreviousValues
}

input InfluenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InfluenceWhereInput
  AND: [InfluenceSubscriptionWhereInput!]
  OR: [InfluenceSubscriptionWhereInput!]
  NOT: [InfluenceSubscriptionWhereInput!]
}

input InfluenceUpdateInput {
  keywords: KeyWordUpdateManyInput
  kind: FactorKind
  name: String
  desc: String
  company: CompanyUpdateOneRequiredWithoutInfluencesInput
  dierction: Direction
}

input InfluenceUpdateManyDataInput {
  kind: FactorKind
  name: String
  desc: String
  dierction: Direction
}

input InfluenceUpdateManyMutationInput {
  kind: FactorKind
  name: String
  desc: String
  dierction: Direction
}

input InfluenceUpdateManyWithoutCompanyInput {
  create: [InfluenceCreateWithoutCompanyInput!]
  delete: [InfluenceWhereUniqueInput!]
  connect: [InfluenceWhereUniqueInput!]
  set: [InfluenceWhereUniqueInput!]
  disconnect: [InfluenceWhereUniqueInput!]
  update: [InfluenceUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [InfluenceUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [InfluenceScalarWhereInput!]
  updateMany: [InfluenceUpdateManyWithWhereNestedInput!]
}

input InfluenceUpdateManyWithWhereNestedInput {
  where: InfluenceScalarWhereInput!
  data: InfluenceUpdateManyDataInput!
}

input InfluenceUpdateWithoutCompanyDataInput {
  keywords: KeyWordUpdateManyInput
  kind: FactorKind
  name: String
  desc: String
  dierction: Direction
}

input InfluenceUpdateWithWhereUniqueWithoutCompanyInput {
  where: InfluenceWhereUniqueInput!
  data: InfluenceUpdateWithoutCompanyDataInput!
}

input InfluenceUpsertWithWhereUniqueWithoutCompanyInput {
  where: InfluenceWhereUniqueInput!
  update: InfluenceUpdateWithoutCompanyDataInput!
  create: InfluenceCreateWithoutCompanyInput!
}

input InfluenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  keywords_every: KeyWordWhereInput
  keywords_some: KeyWordWhereInput
  keywords_none: KeyWordWhereInput
  kind: FactorKind
  kind_not: FactorKind
  kind_in: [FactorKind!]
  kind_not_in: [FactorKind!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  company: CompanyWhereInput
  dierction: Direction
  dierction_not: Direction
  dierction_in: [Direction!]
  dierction_not_in: [Direction!]
  AND: [InfluenceWhereInput!]
  OR: [InfluenceWhereInput!]
  NOT: [InfluenceWhereInput!]
}

input InfluenceWhereUniqueInput {
  id: ID
}

type KeyWord {
  id: ID!
  name: String!
}

type KeyWordConnection {
  pageInfo: PageInfo!
  edges: [KeyWordEdge]!
  aggregate: AggregateKeyWord!
}

input KeyWordCreateInput {
  id: ID
  name: String!
}

input KeyWordCreateManyInput {
  create: [KeyWordCreateInput!]
  connect: [KeyWordWhereUniqueInput!]
}

type KeyWordEdge {
  node: KeyWord!
  cursor: String!
}

enum KeyWordOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type KeyWordPreviousValues {
  id: ID!
  name: String!
}

input KeyWordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeyWordScalarWhereInput!]
  OR: [KeyWordScalarWhereInput!]
  NOT: [KeyWordScalarWhereInput!]
}

type KeyWordSubscriptionPayload {
  mutation: MutationType!
  node: KeyWord
  updatedFields: [String!]
  previousValues: KeyWordPreviousValues
}

input KeyWordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: KeyWordWhereInput
  AND: [KeyWordSubscriptionWhereInput!]
  OR: [KeyWordSubscriptionWhereInput!]
  NOT: [KeyWordSubscriptionWhereInput!]
}

input KeyWordUpdateDataInput {
  name: String
}

input KeyWordUpdateInput {
  name: String
}

input KeyWordUpdateManyDataInput {
  name: String
}

input KeyWordUpdateManyInput {
  create: [KeyWordCreateInput!]
  update: [KeyWordUpdateWithWhereUniqueNestedInput!]
  upsert: [KeyWordUpsertWithWhereUniqueNestedInput!]
  delete: [KeyWordWhereUniqueInput!]
  connect: [KeyWordWhereUniqueInput!]
  set: [KeyWordWhereUniqueInput!]
  disconnect: [KeyWordWhereUniqueInput!]
  deleteMany: [KeyWordScalarWhereInput!]
  updateMany: [KeyWordUpdateManyWithWhereNestedInput!]
}

input KeyWordUpdateManyMutationInput {
  name: String
}

input KeyWordUpdateManyWithWhereNestedInput {
  where: KeyWordScalarWhereInput!
  data: KeyWordUpdateManyDataInput!
}

input KeyWordUpdateWithWhereUniqueNestedInput {
  where: KeyWordWhereUniqueInput!
  data: KeyWordUpdateDataInput!
}

input KeyWordUpsertWithWhereUniqueNestedInput {
  where: KeyWordWhereUniqueInput!
  update: KeyWordUpdateDataInput!
  create: KeyWordCreateInput!
}

input KeyWordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeyWordWhereInput!]
  OR: [KeyWordWhereInput!]
  NOT: [KeyWordWhereInput!]
}

input KeyWordWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createInfluence(data: InfluenceCreateInput!): Influence!
  updateInfluence(data: InfluenceUpdateInput!, where: InfluenceWhereUniqueInput!): Influence
  updateManyInfluences(data: InfluenceUpdateManyMutationInput!, where: InfluenceWhereInput): BatchPayload!
  upsertInfluence(where: InfluenceWhereUniqueInput!, create: InfluenceCreateInput!, update: InfluenceUpdateInput!): Influence!
  deleteInfluence(where: InfluenceWhereUniqueInput!): Influence
  deleteManyInfluences(where: InfluenceWhereInput): BatchPayload!
  createKeyWord(data: KeyWordCreateInput!): KeyWord!
  updateKeyWord(data: KeyWordUpdateInput!, where: KeyWordWhereUniqueInput!): KeyWord
  updateManyKeyWords(data: KeyWordUpdateManyMutationInput!, where: KeyWordWhereInput): BatchPayload!
  upsertKeyWord(where: KeyWordWhereUniqueInput!, create: KeyWordCreateInput!, update: KeyWordUpdateInput!): KeyWord!
  deleteKeyWord(where: KeyWordWhereUniqueInput!): KeyWord
  deleteManyKeyWords(where: KeyWordWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  name: String!
  introduce: String!
  firstClass: String
  secondClass: String
  thirdClass: String
  inputs(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  outputs(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  introduce: String!
  firstClass: String
  secondClass: String
  thirdClass: String
  inputs: CompanyCreateManyWithoutPurchasesInput
  outputs: CompanyCreateManyWithoutSellesInput
}

input ProductCreateManyWithoutInputsInput {
  create: [ProductCreateWithoutInputsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutOutputsInput {
  create: [ProductCreateWithoutOutputsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutInputsInput {
  id: ID
  name: String!
  introduce: String!
  firstClass: String
  secondClass: String
  thirdClass: String
  outputs: CompanyCreateManyWithoutSellesInput
}

input ProductCreateWithoutOutputsInput {
  id: ID
  name: String!
  introduce: String!
  firstClass: String
  secondClass: String
  thirdClass: String
  inputs: CompanyCreateManyWithoutPurchasesInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  introduce_ASC
  introduce_DESC
  firstClass_ASC
  firstClass_DESC
  secondClass_ASC
  secondClass_DESC
  thirdClass_ASC
  thirdClass_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  introduce: String!
  firstClass: String
  secondClass: String
  thirdClass: String
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  introduce: String
  introduce_not: String
  introduce_in: [String!]
  introduce_not_in: [String!]
  introduce_lt: String
  introduce_lte: String
  introduce_gt: String
  introduce_gte: String
  introduce_contains: String
  introduce_not_contains: String
  introduce_starts_with: String
  introduce_not_starts_with: String
  introduce_ends_with: String
  introduce_not_ends_with: String
  firstClass: String
  firstClass_not: String
  firstClass_in: [String!]
  firstClass_not_in: [String!]
  firstClass_lt: String
  firstClass_lte: String
  firstClass_gt: String
  firstClass_gte: String
  firstClass_contains: String
  firstClass_not_contains: String
  firstClass_starts_with: String
  firstClass_not_starts_with: String
  firstClass_ends_with: String
  firstClass_not_ends_with: String
  secondClass: String
  secondClass_not: String
  secondClass_in: [String!]
  secondClass_not_in: [String!]
  secondClass_lt: String
  secondClass_lte: String
  secondClass_gt: String
  secondClass_gte: String
  secondClass_contains: String
  secondClass_not_contains: String
  secondClass_starts_with: String
  secondClass_not_starts_with: String
  secondClass_ends_with: String
  secondClass_not_ends_with: String
  thirdClass: String
  thirdClass_not: String
  thirdClass_in: [String!]
  thirdClass_not_in: [String!]
  thirdClass_lt: String
  thirdClass_lte: String
  thirdClass_gt: String
  thirdClass_gte: String
  thirdClass_contains: String
  thirdClass_not_contains: String
  thirdClass_starts_with: String
  thirdClass_not_starts_with: String
  thirdClass_ends_with: String
  thirdClass_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  introduce: String
  firstClass: String
  secondClass: String
  thirdClass: String
  inputs: CompanyUpdateManyWithoutPurchasesInput
  outputs: CompanyUpdateManyWithoutSellesInput
}

input ProductUpdateManyDataInput {
  name: String
  introduce: String
  firstClass: String
  secondClass: String
  thirdClass: String
}

input ProductUpdateManyMutationInput {
  name: String
  introduce: String
  firstClass: String
  secondClass: String
  thirdClass: String
}

input ProductUpdateManyWithoutInputsInput {
  create: [ProductCreateWithoutInputsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutInputsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutInputsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutOutputsInput {
  create: [ProductCreateWithoutOutputsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutOutputsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutOutputsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateWithoutInputsDataInput {
  name: String
  introduce: String
  firstClass: String
  secondClass: String
  thirdClass: String
  outputs: CompanyUpdateManyWithoutSellesInput
}

input ProductUpdateWithoutOutputsDataInput {
  name: String
  introduce: String
  firstClass: String
  secondClass: String
  thirdClass: String
  inputs: CompanyUpdateManyWithoutPurchasesInput
}

input ProductUpdateWithWhereUniqueWithoutInputsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutInputsDataInput!
}

input ProductUpdateWithWhereUniqueWithoutOutputsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutOutputsDataInput!
}

input ProductUpsertWithWhereUniqueWithoutInputsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutInputsDataInput!
  create: ProductCreateWithoutInputsInput!
}

input ProductUpsertWithWhereUniqueWithoutOutputsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutOutputsDataInput!
  create: ProductCreateWithoutOutputsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  introduce: String
  introduce_not: String
  introduce_in: [String!]
  introduce_not_in: [String!]
  introduce_lt: String
  introduce_lte: String
  introduce_gt: String
  introduce_gte: String
  introduce_contains: String
  introduce_not_contains: String
  introduce_starts_with: String
  introduce_not_starts_with: String
  introduce_ends_with: String
  introduce_not_ends_with: String
  firstClass: String
  firstClass_not: String
  firstClass_in: [String!]
  firstClass_not_in: [String!]
  firstClass_lt: String
  firstClass_lte: String
  firstClass_gt: String
  firstClass_gte: String
  firstClass_contains: String
  firstClass_not_contains: String
  firstClass_starts_with: String
  firstClass_not_starts_with: String
  firstClass_ends_with: String
  firstClass_not_ends_with: String
  secondClass: String
  secondClass_not: String
  secondClass_in: [String!]
  secondClass_not_in: [String!]
  secondClass_lt: String
  secondClass_lte: String
  secondClass_gt: String
  secondClass_gte: String
  secondClass_contains: String
  secondClass_not_contains: String
  secondClass_starts_with: String
  secondClass_not_starts_with: String
  secondClass_ends_with: String
  secondClass_not_ends_with: String
  thirdClass: String
  thirdClass_not: String
  thirdClass_in: [String!]
  thirdClass_not_in: [String!]
  thirdClass_lt: String
  thirdClass_lte: String
  thirdClass_gt: String
  thirdClass_gte: String
  thirdClass_contains: String
  thirdClass_not_contains: String
  thirdClass_starts_with: String
  thirdClass_not_starts_with: String
  thirdClass_ends_with: String
  thirdClass_not_ends_with: String
  inputs_every: CompanyWhereInput
  inputs_some: CompanyWhereInput
  inputs_none: CompanyWhereInput
  outputs_every: CompanyWhereInput
  outputs_some: CompanyWhereInput
  outputs_none: CompanyWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
  name: String
}

type Query {
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  influence(where: InfluenceWhereUniqueInput!): Influence
  influences(where: InfluenceWhereInput, orderBy: InfluenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Influence]!
  influencesConnection(where: InfluenceWhereInput, orderBy: InfluenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InfluenceConnection!
  keyWord(where: KeyWordWhereUniqueInput!): KeyWord
  keyWords(where: KeyWordWhereInput, orderBy: KeyWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeyWord]!
  keyWordsConnection(where: KeyWordWhereInput, orderBy: KeyWordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeyWordConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  CUSTOMER
}

enum SrcKind {
  INNER
  OUTER
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  influence(where: InfluenceSubscriptionWhereInput): InfluenceSubscriptionPayload
  keyWord(where: KeyWordSubscriptionWhereInput): KeyWordSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum TimeKind {
  PAST
  FUTRUE
}

type User {
  id: ID!
  username: String!
  password: String!
  role: Role!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  role: Role
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  role: Role
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
`
      }
    