module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCompany {
  count: Int!
}

type AggregateCompanyEvent {
  count: Int!
}

type AggregateIndustry {
  count: Int!
}

type AggregateIndustryEvent {
  count: Int!
}

type AggregateIndustryInfluence {
  count: Int!
}

type AggregateKeyword {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateResearch {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Company {
  id: ID!
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  trades(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry!]
  events(where: CompanyEventWhereInput, orderBy: CompanyEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyEvent!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  trades: IndustryCreateManyWithoutCompaniesInput
  events: CompanyEventCreateManyWithoutCompanyInput
}

input CompanyCreateManyWithoutTradesInput {
  create: [CompanyCreateWithoutTradesInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutEventsInput {
  create: CompanyCreateWithoutEventsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutEventsInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  trades: IndustryCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutTradesInput {
  id: ID
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  events: CompanyEventCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

type CompanyEvent {
  id: ID!
  title: String!
  content: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime
  influence: String!
  kind: FactorKind!
  dierction: Direction!
  company: Company!
}

type CompanyEventConnection {
  pageInfo: PageInfo!
  edges: [CompanyEventEdge]!
  aggregate: AggregateCompanyEvent!
}

input CompanyEventCreateInput {
  id: ID
  title: String!
  content: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime
  influence: String!
  kind: FactorKind!
  dierction: Direction!
  company: CompanyCreateOneWithoutEventsInput!
}

input CompanyEventCreateManyWithoutCompanyInput {
  create: [CompanyEventCreateWithoutCompanyInput!]
  connect: [CompanyEventWhereUniqueInput!]
}

input CompanyEventCreateWithoutCompanyInput {
  id: ID
  title: String!
  content: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime
  influence: String!
  kind: FactorKind!
  dierction: Direction!
}

type CompanyEventEdge {
  node: CompanyEvent!
  cursor: String!
}

enum CompanyEventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  reportTime_ASC
  reportTime_DESC
  happen_ASC
  happen_DESC
  happenTime_ASC
  happenTime_DESC
  influence_ASC
  influence_DESC
  kind_ASC
  kind_DESC
  dierction_ASC
  dierction_DESC
}

type CompanyEventPreviousValues {
  id: ID!
  title: String!
  content: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime
  influence: String!
  kind: FactorKind!
  dierction: Direction!
}

input CompanyEventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  reportTime: DateTime
  reportTime_not: DateTime
  reportTime_in: [DateTime!]
  reportTime_not_in: [DateTime!]
  reportTime_lt: DateTime
  reportTime_lte: DateTime
  reportTime_gt: DateTime
  reportTime_gte: DateTime
  happen: TimeKind
  happen_not: TimeKind
  happen_in: [TimeKind!]
  happen_not_in: [TimeKind!]
  happenTime: DateTime
  happenTime_not: DateTime
  happenTime_in: [DateTime!]
  happenTime_not_in: [DateTime!]
  happenTime_lt: DateTime
  happenTime_lte: DateTime
  happenTime_gt: DateTime
  happenTime_gte: DateTime
  influence: String
  influence_not: String
  influence_in: [String!]
  influence_not_in: [String!]
  influence_lt: String
  influence_lte: String
  influence_gt: String
  influence_gte: String
  influence_contains: String
  influence_not_contains: String
  influence_starts_with: String
  influence_not_starts_with: String
  influence_ends_with: String
  influence_not_ends_with: String
  kind: FactorKind
  kind_not: FactorKind
  kind_in: [FactorKind!]
  kind_not_in: [FactorKind!]
  dierction: Direction
  dierction_not: Direction
  dierction_in: [Direction!]
  dierction_not_in: [Direction!]
  AND: [CompanyEventScalarWhereInput!]
  OR: [CompanyEventScalarWhereInput!]
  NOT: [CompanyEventScalarWhereInput!]
}

type CompanyEventSubscriptionPayload {
  mutation: MutationType!
  node: CompanyEvent
  updatedFields: [String!]
  previousValues: CompanyEventPreviousValues
}

input CompanyEventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyEventWhereInput
  AND: [CompanyEventSubscriptionWhereInput!]
  OR: [CompanyEventSubscriptionWhereInput!]
  NOT: [CompanyEventSubscriptionWhereInput!]
}

input CompanyEventUpdateInput {
  title: String
  content: String
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  influence: String
  kind: FactorKind
  dierction: Direction
  company: CompanyUpdateOneRequiredWithoutEventsInput
}

input CompanyEventUpdateManyDataInput {
  title: String
  content: String
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  influence: String
  kind: FactorKind
  dierction: Direction
}

input CompanyEventUpdateManyMutationInput {
  title: String
  content: String
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  influence: String
  kind: FactorKind
  dierction: Direction
}

input CompanyEventUpdateManyWithoutCompanyInput {
  create: [CompanyEventCreateWithoutCompanyInput!]
  delete: [CompanyEventWhereUniqueInput!]
  connect: [CompanyEventWhereUniqueInput!]
  set: [CompanyEventWhereUniqueInput!]
  disconnect: [CompanyEventWhereUniqueInput!]
  update: [CompanyEventUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CompanyEventUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CompanyEventScalarWhereInput!]
  updateMany: [CompanyEventUpdateManyWithWhereNestedInput!]
}

input CompanyEventUpdateManyWithWhereNestedInput {
  where: CompanyEventScalarWhereInput!
  data: CompanyEventUpdateManyDataInput!
}

input CompanyEventUpdateWithoutCompanyDataInput {
  title: String
  content: String
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  influence: String
  kind: FactorKind
  dierction: Direction
}

input CompanyEventUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyEventWhereUniqueInput!
  data: CompanyEventUpdateWithoutCompanyDataInput!
}

input CompanyEventUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyEventWhereUniqueInput!
  update: CompanyEventUpdateWithoutCompanyDataInput!
  create: CompanyEventCreateWithoutCompanyInput!
}

input CompanyEventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  reportTime: DateTime
  reportTime_not: DateTime
  reportTime_in: [DateTime!]
  reportTime_not_in: [DateTime!]
  reportTime_lt: DateTime
  reportTime_lte: DateTime
  reportTime_gt: DateTime
  reportTime_gte: DateTime
  happen: TimeKind
  happen_not: TimeKind
  happen_in: [TimeKind!]
  happen_not_in: [TimeKind!]
  happenTime: DateTime
  happenTime_not: DateTime
  happenTime_in: [DateTime!]
  happenTime_not_in: [DateTime!]
  happenTime_lt: DateTime
  happenTime_lte: DateTime
  happenTime_gt: DateTime
  happenTime_gte: DateTime
  influence: String
  influence_not: String
  influence_in: [String!]
  influence_not_in: [String!]
  influence_lt: String
  influence_lte: String
  influence_gt: String
  influence_gte: String
  influence_contains: String
  influence_not_contains: String
  influence_starts_with: String
  influence_not_starts_with: String
  influence_ends_with: String
  influence_not_ends_with: String
  kind: FactorKind
  kind_not: FactorKind
  kind_in: [FactorKind!]
  kind_not_in: [FactorKind!]
  dierction: Direction
  dierction_not: Direction
  dierction_in: [Direction!]
  dierction_not_in: [Direction!]
  company: CompanyWhereInput
  AND: [CompanyEventWhereInput!]
  OR: [CompanyEventWhereInput!]
  NOT: [CompanyEventWhereInput!]
}

input CompanyEventWhereUniqueInput {
  id: ID
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  symbol_ASC
  symbol_DESC
  name_ASC
  name_DESC
  area_ASC
  area_DESC
  industry_ASC
  industry_DESC
  fullname_ASC
  fullname_DESC
  enname_ASC
  enname_DESC
  market_ASC
  market_DESC
  exchange_ASC
  exchange_DESC
  currType_ASC
  currType_DESC
  listStatus_ASC
  listStatus_DESC
  listDate_ASC
  listDate_DESC
  delistDate_ASC
  delistDate_DESC
  isHS_ASC
  isHS_DESC
  scope_ASC
  scope_DESC
  desc_ASC
  desc_DESC
}

type CompanyPreviousValues {
  id: ID!
  symbol: String!
  name: String!
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  enname: String
  enname_not: String
  enname_in: [String!]
  enname_not_in: [String!]
  enname_lt: String
  enname_lte: String
  enname_gt: String
  enname_gte: String
  enname_contains: String
  enname_not_contains: String
  enname_starts_with: String
  enname_not_starts_with: String
  enname_ends_with: String
  enname_not_ends_with: String
  market: String
  market_not: String
  market_in: [String!]
  market_not_in: [String!]
  market_lt: String
  market_lte: String
  market_gt: String
  market_gte: String
  market_contains: String
  market_not_contains: String
  market_starts_with: String
  market_not_starts_with: String
  market_ends_with: String
  market_not_ends_with: String
  exchange: String
  exchange_not: String
  exchange_in: [String!]
  exchange_not_in: [String!]
  exchange_lt: String
  exchange_lte: String
  exchange_gt: String
  exchange_gte: String
  exchange_contains: String
  exchange_not_contains: String
  exchange_starts_with: String
  exchange_not_starts_with: String
  exchange_ends_with: String
  exchange_not_ends_with: String
  currType: String
  currType_not: String
  currType_in: [String!]
  currType_not_in: [String!]
  currType_lt: String
  currType_lte: String
  currType_gt: String
  currType_gte: String
  currType_contains: String
  currType_not_contains: String
  currType_starts_with: String
  currType_not_starts_with: String
  currType_ends_with: String
  currType_not_ends_with: String
  listStatus: String
  listStatus_not: String
  listStatus_in: [String!]
  listStatus_not_in: [String!]
  listStatus_lt: String
  listStatus_lte: String
  listStatus_gt: String
  listStatus_gte: String
  listStatus_contains: String
  listStatus_not_contains: String
  listStatus_starts_with: String
  listStatus_not_starts_with: String
  listStatus_ends_with: String
  listStatus_not_ends_with: String
  listDate: String
  listDate_not: String
  listDate_in: [String!]
  listDate_not_in: [String!]
  listDate_lt: String
  listDate_lte: String
  listDate_gt: String
  listDate_gte: String
  listDate_contains: String
  listDate_not_contains: String
  listDate_starts_with: String
  listDate_not_starts_with: String
  listDate_ends_with: String
  listDate_not_ends_with: String
  delistDate: String
  delistDate_not: String
  delistDate_in: [String!]
  delistDate_not_in: [String!]
  delistDate_lt: String
  delistDate_lte: String
  delistDate_gt: String
  delistDate_gte: String
  delistDate_contains: String
  delistDate_not_contains: String
  delistDate_starts_with: String
  delistDate_not_starts_with: String
  delistDate_ends_with: String
  delistDate_not_ends_with: String
  isHS: String
  isHS_not: String
  isHS_in: [String!]
  isHS_not_in: [String!]
  isHS_lt: String
  isHS_lte: String
  isHS_gt: String
  isHS_gte: String
  isHS_contains: String
  isHS_not_contains: String
  isHS_starts_with: String
  isHS_not_starts_with: String
  isHS_ends_with: String
  isHS_not_ends_with: String
  scope: String
  scope_not: String
  scope_in: [String!]
  scope_not_in: [String!]
  scope_lt: String
  scope_lte: String
  scope_gt: String
  scope_gte: String
  scope_contains: String
  scope_not_contains: String
  scope_starts_with: String
  scope_not_starts_with: String
  scope_ends_with: String
  scope_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  trades: IndustryUpdateManyWithoutCompaniesInput
  events: CompanyEventUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
}

input CompanyUpdateManyMutationInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
}

input CompanyUpdateManyWithoutTradesInput {
  create: [CompanyCreateWithoutTradesInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutTradesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutTradesInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutEventsInput {
  create: CompanyCreateWithoutEventsInput
  update: CompanyUpdateWithoutEventsDataInput
  upsert: CompanyUpsertWithoutEventsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutEventsDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  trades: IndustryUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutTradesDataInput {
  symbol: String
  name: String
  area: String
  industry: String
  fullname: String
  enname: String
  market: String
  exchange: String
  currType: String
  listStatus: String
  listDate: String
  delistDate: String
  isHS: String
  scope: String
  desc: String
  events: CompanyEventUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithWhereUniqueWithoutTradesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutTradesDataInput!
}

input CompanyUpsertWithoutEventsInput {
  update: CompanyUpdateWithoutEventsDataInput!
  create: CompanyCreateWithoutEventsInput!
}

input CompanyUpsertWithWhereUniqueWithoutTradesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutTradesDataInput!
  create: CompanyCreateWithoutTradesInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  enname: String
  enname_not: String
  enname_in: [String!]
  enname_not_in: [String!]
  enname_lt: String
  enname_lte: String
  enname_gt: String
  enname_gte: String
  enname_contains: String
  enname_not_contains: String
  enname_starts_with: String
  enname_not_starts_with: String
  enname_ends_with: String
  enname_not_ends_with: String
  market: String
  market_not: String
  market_in: [String!]
  market_not_in: [String!]
  market_lt: String
  market_lte: String
  market_gt: String
  market_gte: String
  market_contains: String
  market_not_contains: String
  market_starts_with: String
  market_not_starts_with: String
  market_ends_with: String
  market_not_ends_with: String
  exchange: String
  exchange_not: String
  exchange_in: [String!]
  exchange_not_in: [String!]
  exchange_lt: String
  exchange_lte: String
  exchange_gt: String
  exchange_gte: String
  exchange_contains: String
  exchange_not_contains: String
  exchange_starts_with: String
  exchange_not_starts_with: String
  exchange_ends_with: String
  exchange_not_ends_with: String
  currType: String
  currType_not: String
  currType_in: [String!]
  currType_not_in: [String!]
  currType_lt: String
  currType_lte: String
  currType_gt: String
  currType_gte: String
  currType_contains: String
  currType_not_contains: String
  currType_starts_with: String
  currType_not_starts_with: String
  currType_ends_with: String
  currType_not_ends_with: String
  listStatus: String
  listStatus_not: String
  listStatus_in: [String!]
  listStatus_not_in: [String!]
  listStatus_lt: String
  listStatus_lte: String
  listStatus_gt: String
  listStatus_gte: String
  listStatus_contains: String
  listStatus_not_contains: String
  listStatus_starts_with: String
  listStatus_not_starts_with: String
  listStatus_ends_with: String
  listStatus_not_ends_with: String
  listDate: String
  listDate_not: String
  listDate_in: [String!]
  listDate_not_in: [String!]
  listDate_lt: String
  listDate_lte: String
  listDate_gt: String
  listDate_gte: String
  listDate_contains: String
  listDate_not_contains: String
  listDate_starts_with: String
  listDate_not_starts_with: String
  listDate_ends_with: String
  listDate_not_ends_with: String
  delistDate: String
  delistDate_not: String
  delistDate_in: [String!]
  delistDate_not_in: [String!]
  delistDate_lt: String
  delistDate_lte: String
  delistDate_gt: String
  delistDate_gte: String
  delistDate_contains: String
  delistDate_not_contains: String
  delistDate_starts_with: String
  delistDate_not_starts_with: String
  delistDate_ends_with: String
  delistDate_not_ends_with: String
  isHS: String
  isHS_not: String
  isHS_in: [String!]
  isHS_not_in: [String!]
  isHS_lt: String
  isHS_lte: String
  isHS_gt: String
  isHS_gte: String
  isHS_contains: String
  isHS_not_contains: String
  isHS_starts_with: String
  isHS_not_starts_with: String
  isHS_ends_with: String
  isHS_not_ends_with: String
  scope: String
  scope_not: String
  scope_in: [String!]
  scope_not_in: [String!]
  scope_lt: String
  scope_lte: String
  scope_gt: String
  scope_gte: String
  scope_contains: String
  scope_not_contains: String
  scope_starts_with: String
  scope_not_starts_with: String
  scope_ends_with: String
  scope_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  trades_every: IndustryWhereInput
  trades_some: IndustryWhereInput
  trades_none: IndustryWhereInput
  events_every: CompanyEventWhereInput
  events_some: CompanyEventWhereInput
  events_none: CompanyEventWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
  symbol: String
  name: String
}

scalar DateTime

enum Direction {
  GOOD
  BAD
}

enum FactorKind {
  ASSET
  DEBT
  EQUITY
  INCOME
  COST
  FEE
  BRAND
}

type Industry {
  id: ID!
  code: String
  name: String!
  desc: String!
  researches(where: ResearchWhereInput, orderBy: ResearchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Research!]
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  influences(where: IndustryInfluenceWhereInput, orderBy: IndustryInfluenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndustryInfluence!]
  purchases(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  selles(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type IndustryConnection {
  pageInfo: PageInfo!
  edges: [IndustryEdge]!
  aggregate: AggregateIndustry!
}

input IndustryCreateInput {
  id: ID
  code: String
  name: String!
  desc: String!
  researches: ResearchCreateManyInput
  companies: CompanyCreateManyWithoutTradesInput
  influences: IndustryInfluenceCreateManyWithoutIndustryInput
  purchases: ProductCreateManyWithoutInputsInput
  selles: ProductCreateManyWithoutOutputsInput
}

input IndustryCreateManyWithoutCompaniesInput {
  create: [IndustryCreateWithoutCompaniesInput!]
  connect: [IndustryWhereUniqueInput!]
}

input IndustryCreateManyWithoutPurchasesInput {
  create: [IndustryCreateWithoutPurchasesInput!]
  connect: [IndustryWhereUniqueInput!]
}

input IndustryCreateManyWithoutSellesInput {
  create: [IndustryCreateWithoutSellesInput!]
  connect: [IndustryWhereUniqueInput!]
}

input IndustryCreateOneWithoutInfluencesInput {
  create: IndustryCreateWithoutInfluencesInput
  connect: IndustryWhereUniqueInput
}

input IndustryCreateWithoutCompaniesInput {
  id: ID
  code: String
  name: String!
  desc: String!
  researches: ResearchCreateManyInput
  influences: IndustryInfluenceCreateManyWithoutIndustryInput
  purchases: ProductCreateManyWithoutInputsInput
  selles: ProductCreateManyWithoutOutputsInput
}

input IndustryCreateWithoutInfluencesInput {
  id: ID
  code: String
  name: String!
  desc: String!
  researches: ResearchCreateManyInput
  companies: CompanyCreateManyWithoutTradesInput
  purchases: ProductCreateManyWithoutInputsInput
  selles: ProductCreateManyWithoutOutputsInput
}

input IndustryCreateWithoutPurchasesInput {
  id: ID
  code: String
  name: String!
  desc: String!
  researches: ResearchCreateManyInput
  companies: CompanyCreateManyWithoutTradesInput
  influences: IndustryInfluenceCreateManyWithoutIndustryInput
  selles: ProductCreateManyWithoutOutputsInput
}

input IndustryCreateWithoutSellesInput {
  id: ID
  code: String
  name: String!
  desc: String!
  researches: ResearchCreateManyInput
  companies: CompanyCreateManyWithoutTradesInput
  influences: IndustryInfluenceCreateManyWithoutIndustryInput
  purchases: ProductCreateManyWithoutInputsInput
}

type IndustryEdge {
  node: Industry!
  cursor: String!
}

type IndustryEvent {
  id: ID!
  title: String!
  src: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime!
  content: String!
  Keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword!]
}

type IndustryEventConnection {
  pageInfo: PageInfo!
  edges: [IndustryEventEdge]!
  aggregate: AggregateIndustryEvent!
}

input IndustryEventCreateInput {
  id: ID
  title: String!
  src: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime!
  content: String!
  Keywords: KeywordCreateManyInput
}

type IndustryEventEdge {
  node: IndustryEvent!
  cursor: String!
}

enum IndustryEventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  src_ASC
  src_DESC
  reportTime_ASC
  reportTime_DESC
  happen_ASC
  happen_DESC
  happenTime_ASC
  happenTime_DESC
  content_ASC
  content_DESC
}

type IndustryEventPreviousValues {
  id: ID!
  title: String!
  src: String!
  reportTime: DateTime!
  happen: TimeKind!
  happenTime: DateTime!
  content: String!
}

type IndustryEventSubscriptionPayload {
  mutation: MutationType!
  node: IndustryEvent
  updatedFields: [String!]
  previousValues: IndustryEventPreviousValues
}

input IndustryEventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryEventWhereInput
  AND: [IndustryEventSubscriptionWhereInput!]
  OR: [IndustryEventSubscriptionWhereInput!]
  NOT: [IndustryEventSubscriptionWhereInput!]
}

input IndustryEventUpdateInput {
  title: String
  src: String
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  content: String
  Keywords: KeywordUpdateManyInput
}

input IndustryEventUpdateManyMutationInput {
  title: String
  src: String
  reportTime: DateTime
  happen: TimeKind
  happenTime: DateTime
  content: String
}

input IndustryEventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  src: String
  src_not: String
  src_in: [String!]
  src_not_in: [String!]
  src_lt: String
  src_lte: String
  src_gt: String
  src_gte: String
  src_contains: String
  src_not_contains: String
  src_starts_with: String
  src_not_starts_with: String
  src_ends_with: String
  src_not_ends_with: String
  reportTime: DateTime
  reportTime_not: DateTime
  reportTime_in: [DateTime!]
  reportTime_not_in: [DateTime!]
  reportTime_lt: DateTime
  reportTime_lte: DateTime
  reportTime_gt: DateTime
  reportTime_gte: DateTime
  happen: TimeKind
  happen_not: TimeKind
  happen_in: [TimeKind!]
  happen_not_in: [TimeKind!]
  happenTime: DateTime
  happenTime_not: DateTime
  happenTime_in: [DateTime!]
  happenTime_not_in: [DateTime!]
  happenTime_lt: DateTime
  happenTime_lte: DateTime
  happenTime_gt: DateTime
  happenTime_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  Keywords_every: KeywordWhereInput
  Keywords_some: KeywordWhereInput
  Keywords_none: KeywordWhereInput
  AND: [IndustryEventWhereInput!]
  OR: [IndustryEventWhereInput!]
  NOT: [IndustryEventWhereInput!]
}

input IndustryEventWhereUniqueInput {
  id: ID
}

type IndustryInfluence {
  id: ID!
  keyword: Keyword
  keywordDirection: Direction!
  kind: FactorKind!
  desc: String!
  industry: Industry!
  direction: Direction!
}

type IndustryInfluenceConnection {
  pageInfo: PageInfo!
  edges: [IndustryInfluenceEdge]!
  aggregate: AggregateIndustryInfluence!
}

input IndustryInfluenceCreateInput {
  id: ID
  keyword: KeywordCreateOneInput
  keywordDirection: Direction!
  kind: FactorKind!
  desc: String!
  industry: IndustryCreateOneWithoutInfluencesInput!
  direction: Direction!
}

input IndustryInfluenceCreateManyWithoutIndustryInput {
  create: [IndustryInfluenceCreateWithoutIndustryInput!]
  connect: [IndustryInfluenceWhereUniqueInput!]
}

input IndustryInfluenceCreateWithoutIndustryInput {
  id: ID
  keyword: KeywordCreateOneInput
  keywordDirection: Direction!
  kind: FactorKind!
  desc: String!
  direction: Direction!
}

type IndustryInfluenceEdge {
  node: IndustryInfluence!
  cursor: String!
}

enum IndustryInfluenceOrderByInput {
  id_ASC
  id_DESC
  keywordDirection_ASC
  keywordDirection_DESC
  kind_ASC
  kind_DESC
  desc_ASC
  desc_DESC
  direction_ASC
  direction_DESC
}

type IndustryInfluencePreviousValues {
  id: ID!
  keywordDirection: Direction!
  kind: FactorKind!
  desc: String!
  direction: Direction!
}

input IndustryInfluenceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  keywordDirection: Direction
  keywordDirection_not: Direction
  keywordDirection_in: [Direction!]
  keywordDirection_not_in: [Direction!]
  kind: FactorKind
  kind_not: FactorKind
  kind_in: [FactorKind!]
  kind_not_in: [FactorKind!]
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  direction: Direction
  direction_not: Direction
  direction_in: [Direction!]
  direction_not_in: [Direction!]
  AND: [IndustryInfluenceScalarWhereInput!]
  OR: [IndustryInfluenceScalarWhereInput!]
  NOT: [IndustryInfluenceScalarWhereInput!]
}

type IndustryInfluenceSubscriptionPayload {
  mutation: MutationType!
  node: IndustryInfluence
  updatedFields: [String!]
  previousValues: IndustryInfluencePreviousValues
}

input IndustryInfluenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryInfluenceWhereInput
  AND: [IndustryInfluenceSubscriptionWhereInput!]
  OR: [IndustryInfluenceSubscriptionWhereInput!]
  NOT: [IndustryInfluenceSubscriptionWhereInput!]
}

input IndustryInfluenceUpdateInput {
  keyword: KeywordUpdateOneInput
  keywordDirection: Direction
  kind: FactorKind
  desc: String
  industry: IndustryUpdateOneRequiredWithoutInfluencesInput
  direction: Direction
}

input IndustryInfluenceUpdateManyDataInput {
  keywordDirection: Direction
  kind: FactorKind
  desc: String
  direction: Direction
}

input IndustryInfluenceUpdateManyMutationInput {
  keywordDirection: Direction
  kind: FactorKind
  desc: String
  direction: Direction
}

input IndustryInfluenceUpdateManyWithoutIndustryInput {
  create: [IndustryInfluenceCreateWithoutIndustryInput!]
  delete: [IndustryInfluenceWhereUniqueInput!]
  connect: [IndustryInfluenceWhereUniqueInput!]
  set: [IndustryInfluenceWhereUniqueInput!]
  disconnect: [IndustryInfluenceWhereUniqueInput!]
  update: [IndustryInfluenceUpdateWithWhereUniqueWithoutIndustryInput!]
  upsert: [IndustryInfluenceUpsertWithWhereUniqueWithoutIndustryInput!]
  deleteMany: [IndustryInfluenceScalarWhereInput!]
  updateMany: [IndustryInfluenceUpdateManyWithWhereNestedInput!]
}

input IndustryInfluenceUpdateManyWithWhereNestedInput {
  where: IndustryInfluenceScalarWhereInput!
  data: IndustryInfluenceUpdateManyDataInput!
}

input IndustryInfluenceUpdateWithoutIndustryDataInput {
  keyword: KeywordUpdateOneInput
  keywordDirection: Direction
  kind: FactorKind
  desc: String
  direction: Direction
}

input IndustryInfluenceUpdateWithWhereUniqueWithoutIndustryInput {
  where: IndustryInfluenceWhereUniqueInput!
  data: IndustryInfluenceUpdateWithoutIndustryDataInput!
}

input IndustryInfluenceUpsertWithWhereUniqueWithoutIndustryInput {
  where: IndustryInfluenceWhereUniqueInput!
  update: IndustryInfluenceUpdateWithoutIndustryDataInput!
  create: IndustryInfluenceCreateWithoutIndustryInput!
}

input IndustryInfluenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  keyword: KeywordWhereInput
  keywordDirection: Direction
  keywordDirection_not: Direction
  keywordDirection_in: [Direction!]
  keywordDirection_not_in: [Direction!]
  kind: FactorKind
  kind_not: FactorKind
  kind_in: [FactorKind!]
  kind_not_in: [FactorKind!]
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  industry: IndustryWhereInput
  direction: Direction
  direction_not: Direction
  direction_in: [Direction!]
  direction_not_in: [Direction!]
  AND: [IndustryInfluenceWhereInput!]
  OR: [IndustryInfluenceWhereInput!]
  NOT: [IndustryInfluenceWhereInput!]
}

input IndustryInfluenceWhereUniqueInput {
  id: ID
}

enum IndustryOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
}

type IndustryPreviousValues {
  id: ID!
  code: String
  name: String!
  desc: String!
}

input IndustryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [IndustryScalarWhereInput!]
  OR: [IndustryScalarWhereInput!]
  NOT: [IndustryScalarWhereInput!]
}

type IndustrySubscriptionPayload {
  mutation: MutationType!
  node: Industry
  updatedFields: [String!]
  previousValues: IndustryPreviousValues
}

input IndustrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryWhereInput
  AND: [IndustrySubscriptionWhereInput!]
  OR: [IndustrySubscriptionWhereInput!]
  NOT: [IndustrySubscriptionWhereInput!]
}

input IndustryUpdateInput {
  code: String
  name: String
  desc: String
  researches: ResearchUpdateManyInput
  companies: CompanyUpdateManyWithoutTradesInput
  influences: IndustryInfluenceUpdateManyWithoutIndustryInput
  purchases: ProductUpdateManyWithoutInputsInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input IndustryUpdateManyDataInput {
  code: String
  name: String
  desc: String
}

input IndustryUpdateManyMutationInput {
  code: String
  name: String
  desc: String
}

input IndustryUpdateManyWithoutCompaniesInput {
  create: [IndustryCreateWithoutCompaniesInput!]
  delete: [IndustryWhereUniqueInput!]
  connect: [IndustryWhereUniqueInput!]
  set: [IndustryWhereUniqueInput!]
  disconnect: [IndustryWhereUniqueInput!]
  update: [IndustryUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [IndustryUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [IndustryScalarWhereInput!]
  updateMany: [IndustryUpdateManyWithWhereNestedInput!]
}

input IndustryUpdateManyWithoutPurchasesInput {
  create: [IndustryCreateWithoutPurchasesInput!]
  delete: [IndustryWhereUniqueInput!]
  connect: [IndustryWhereUniqueInput!]
  set: [IndustryWhereUniqueInput!]
  disconnect: [IndustryWhereUniqueInput!]
  update: [IndustryUpdateWithWhereUniqueWithoutPurchasesInput!]
  upsert: [IndustryUpsertWithWhereUniqueWithoutPurchasesInput!]
  deleteMany: [IndustryScalarWhereInput!]
  updateMany: [IndustryUpdateManyWithWhereNestedInput!]
}

input IndustryUpdateManyWithoutSellesInput {
  create: [IndustryCreateWithoutSellesInput!]
  delete: [IndustryWhereUniqueInput!]
  connect: [IndustryWhereUniqueInput!]
  set: [IndustryWhereUniqueInput!]
  disconnect: [IndustryWhereUniqueInput!]
  update: [IndustryUpdateWithWhereUniqueWithoutSellesInput!]
  upsert: [IndustryUpsertWithWhereUniqueWithoutSellesInput!]
  deleteMany: [IndustryScalarWhereInput!]
  updateMany: [IndustryUpdateManyWithWhereNestedInput!]
}

input IndustryUpdateManyWithWhereNestedInput {
  where: IndustryScalarWhereInput!
  data: IndustryUpdateManyDataInput!
}

input IndustryUpdateOneRequiredWithoutInfluencesInput {
  create: IndustryCreateWithoutInfluencesInput
  update: IndustryUpdateWithoutInfluencesDataInput
  upsert: IndustryUpsertWithoutInfluencesInput
  connect: IndustryWhereUniqueInput
}

input IndustryUpdateWithoutCompaniesDataInput {
  code: String
  name: String
  desc: String
  researches: ResearchUpdateManyInput
  influences: IndustryInfluenceUpdateManyWithoutIndustryInput
  purchases: ProductUpdateManyWithoutInputsInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input IndustryUpdateWithoutInfluencesDataInput {
  code: String
  name: String
  desc: String
  researches: ResearchUpdateManyInput
  companies: CompanyUpdateManyWithoutTradesInput
  purchases: ProductUpdateManyWithoutInputsInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input IndustryUpdateWithoutPurchasesDataInput {
  code: String
  name: String
  desc: String
  researches: ResearchUpdateManyInput
  companies: CompanyUpdateManyWithoutTradesInput
  influences: IndustryInfluenceUpdateManyWithoutIndustryInput
  selles: ProductUpdateManyWithoutOutputsInput
}

input IndustryUpdateWithoutSellesDataInput {
  code: String
  name: String
  desc: String
  researches: ResearchUpdateManyInput
  companies: CompanyUpdateManyWithoutTradesInput
  influences: IndustryInfluenceUpdateManyWithoutIndustryInput
  purchases: ProductUpdateManyWithoutInputsInput
}

input IndustryUpdateWithWhereUniqueWithoutCompaniesInput {
  where: IndustryWhereUniqueInput!
  data: IndustryUpdateWithoutCompaniesDataInput!
}

input IndustryUpdateWithWhereUniqueWithoutPurchasesInput {
  where: IndustryWhereUniqueInput!
  data: IndustryUpdateWithoutPurchasesDataInput!
}

input IndustryUpdateWithWhereUniqueWithoutSellesInput {
  where: IndustryWhereUniqueInput!
  data: IndustryUpdateWithoutSellesDataInput!
}

input IndustryUpsertWithoutInfluencesInput {
  update: IndustryUpdateWithoutInfluencesDataInput!
  create: IndustryCreateWithoutInfluencesInput!
}

input IndustryUpsertWithWhereUniqueWithoutCompaniesInput {
  where: IndustryWhereUniqueInput!
  update: IndustryUpdateWithoutCompaniesDataInput!
  create: IndustryCreateWithoutCompaniesInput!
}

input IndustryUpsertWithWhereUniqueWithoutPurchasesInput {
  where: IndustryWhereUniqueInput!
  update: IndustryUpdateWithoutPurchasesDataInput!
  create: IndustryCreateWithoutPurchasesInput!
}

input IndustryUpsertWithWhereUniqueWithoutSellesInput {
  where: IndustryWhereUniqueInput!
  update: IndustryUpdateWithoutSellesDataInput!
  create: IndustryCreateWithoutSellesInput!
}

input IndustryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  researches_every: ResearchWhereInput
  researches_some: ResearchWhereInput
  researches_none: ResearchWhereInput
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  influences_every: IndustryInfluenceWhereInput
  influences_some: IndustryInfluenceWhereInput
  influences_none: IndustryInfluenceWhereInput
  purchases_every: ProductWhereInput
  purchases_some: ProductWhereInput
  purchases_none: ProductWhereInput
  selles_every: ProductWhereInput
  selles_some: ProductWhereInput
  selles_none: ProductWhereInput
  AND: [IndustryWhereInput!]
  OR: [IndustryWhereInput!]
  NOT: [IndustryWhereInput!]
}

input IndustryWhereUniqueInput {
  id: ID
  name: String
}

type Keyword {
  id: ID!
  name: String!
}

type KeywordConnection {
  pageInfo: PageInfo!
  edges: [KeywordEdge]!
  aggregate: AggregateKeyword!
}

input KeywordCreateInput {
  id: ID
  name: String!
}

input KeywordCreateManyInput {
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

input KeywordCreateOneInput {
  create: KeywordCreateInput
  connect: KeywordWhereUniqueInput
}

type KeywordEdge {
  node: Keyword!
  cursor: String!
}

enum KeywordOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type KeywordPreviousValues {
  id: ID!
  name: String!
}

input KeywordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeywordScalarWhereInput!]
  OR: [KeywordScalarWhereInput!]
  NOT: [KeywordScalarWhereInput!]
}

type KeywordSubscriptionPayload {
  mutation: MutationType!
  node: Keyword
  updatedFields: [String!]
  previousValues: KeywordPreviousValues
}

input KeywordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: KeywordWhereInput
  AND: [KeywordSubscriptionWhereInput!]
  OR: [KeywordSubscriptionWhereInput!]
  NOT: [KeywordSubscriptionWhereInput!]
}

input KeywordUpdateDataInput {
  name: String
}

input KeywordUpdateInput {
  name: String
}

input KeywordUpdateManyDataInput {
  name: String
}

input KeywordUpdateManyInput {
  create: [KeywordCreateInput!]
  update: [KeywordUpdateWithWhereUniqueNestedInput!]
  upsert: [KeywordUpsertWithWhereUniqueNestedInput!]
  delete: [KeywordWhereUniqueInput!]
  connect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  deleteMany: [KeywordScalarWhereInput!]
  updateMany: [KeywordUpdateManyWithWhereNestedInput!]
}

input KeywordUpdateManyMutationInput {
  name: String
}

input KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput!
  data: KeywordUpdateManyDataInput!
}

input KeywordUpdateOneInput {
  create: KeywordCreateInput
  update: KeywordUpdateDataInput
  upsert: KeywordUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: KeywordWhereUniqueInput
}

input KeywordUpdateWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateDataInput!
}

input KeywordUpsertNestedInput {
  update: KeywordUpdateDataInput!
  create: KeywordCreateInput!
}

input KeywordUpsertWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput!
  update: KeywordUpdateDataInput!
  create: KeywordCreateInput!
}

input KeywordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
}

input KeywordWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createCompanyEvent(data: CompanyEventCreateInput!): CompanyEvent!
  updateCompanyEvent(data: CompanyEventUpdateInput!, where: CompanyEventWhereUniqueInput!): CompanyEvent
  updateManyCompanyEvents(data: CompanyEventUpdateManyMutationInput!, where: CompanyEventWhereInput): BatchPayload!
  upsertCompanyEvent(where: CompanyEventWhereUniqueInput!, create: CompanyEventCreateInput!, update: CompanyEventUpdateInput!): CompanyEvent!
  deleteCompanyEvent(where: CompanyEventWhereUniqueInput!): CompanyEvent
  deleteManyCompanyEvents(where: CompanyEventWhereInput): BatchPayload!
  createIndustry(data: IndustryCreateInput!): Industry!
  updateIndustry(data: IndustryUpdateInput!, where: IndustryWhereUniqueInput!): Industry
  updateManyIndustries(data: IndustryUpdateManyMutationInput!, where: IndustryWhereInput): BatchPayload!
  upsertIndustry(where: IndustryWhereUniqueInput!, create: IndustryCreateInput!, update: IndustryUpdateInput!): Industry!
  deleteIndustry(where: IndustryWhereUniqueInput!): Industry
  deleteManyIndustries(where: IndustryWhereInput): BatchPayload!
  createIndustryEvent(data: IndustryEventCreateInput!): IndustryEvent!
  updateIndustryEvent(data: IndustryEventUpdateInput!, where: IndustryEventWhereUniqueInput!): IndustryEvent
  updateManyIndustryEvents(data: IndustryEventUpdateManyMutationInput!, where: IndustryEventWhereInput): BatchPayload!
  upsertIndustryEvent(where: IndustryEventWhereUniqueInput!, create: IndustryEventCreateInput!, update: IndustryEventUpdateInput!): IndustryEvent!
  deleteIndustryEvent(where: IndustryEventWhereUniqueInput!): IndustryEvent
  deleteManyIndustryEvents(where: IndustryEventWhereInput): BatchPayload!
  createIndustryInfluence(data: IndustryInfluenceCreateInput!): IndustryInfluence!
  updateIndustryInfluence(data: IndustryInfluenceUpdateInput!, where: IndustryInfluenceWhereUniqueInput!): IndustryInfluence
  updateManyIndustryInfluences(data: IndustryInfluenceUpdateManyMutationInput!, where: IndustryInfluenceWhereInput): BatchPayload!
  upsertIndustryInfluence(where: IndustryInfluenceWhereUniqueInput!, create: IndustryInfluenceCreateInput!, update: IndustryInfluenceUpdateInput!): IndustryInfluence!
  deleteIndustryInfluence(where: IndustryInfluenceWhereUniqueInput!): IndustryInfluence
  deleteManyIndustryInfluences(where: IndustryInfluenceWhereInput): BatchPayload!
  createKeyword(data: KeywordCreateInput!): Keyword!
  updateKeyword(data: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword
  updateManyKeywords(data: KeywordUpdateManyMutationInput!, where: KeywordWhereInput): BatchPayload!
  upsertKeyword(where: KeywordWhereUniqueInput!, create: KeywordCreateInput!, update: KeywordUpdateInput!): Keyword!
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteManyKeywords(where: KeywordWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createResearch(data: ResearchCreateInput!): Research!
  updateResearch(data: ResearchUpdateInput!, where: ResearchWhereUniqueInput!): Research
  updateManyResearches(data: ResearchUpdateManyMutationInput!, where: ResearchWhereInput): BatchPayload!
  upsertResearch(where: ResearchWhereUniqueInput!, create: ResearchCreateInput!, update: ResearchUpdateInput!): Research!
  deleteResearch(where: ResearchWhereUniqueInput!): Research
  deleteManyResearches(where: ResearchWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  name: String!
  introduce: String!
  inputs(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry!]
  outputs(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  introduce: String!
  inputs: IndustryCreateManyWithoutPurchasesInput
  outputs: IndustryCreateManyWithoutSellesInput
}

input ProductCreateManyWithoutInputsInput {
  create: [ProductCreateWithoutInputsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutOutputsInput {
  create: [ProductCreateWithoutOutputsInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutInputsInput {
  id: ID
  name: String!
  introduce: String!
  outputs: IndustryCreateManyWithoutSellesInput
}

input ProductCreateWithoutOutputsInput {
  id: ID
  name: String!
  introduce: String!
  inputs: IndustryCreateManyWithoutPurchasesInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  introduce_ASC
  introduce_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  introduce: String!
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  introduce: String
  introduce_not: String
  introduce_in: [String!]
  introduce_not_in: [String!]
  introduce_lt: String
  introduce_lte: String
  introduce_gt: String
  introduce_gte: String
  introduce_contains: String
  introduce_not_contains: String
  introduce_starts_with: String
  introduce_not_starts_with: String
  introduce_ends_with: String
  introduce_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  introduce: String
  inputs: IndustryUpdateManyWithoutPurchasesInput
  outputs: IndustryUpdateManyWithoutSellesInput
}

input ProductUpdateManyDataInput {
  name: String
  introduce: String
}

input ProductUpdateManyMutationInput {
  name: String
  introduce: String
}

input ProductUpdateManyWithoutInputsInput {
  create: [ProductCreateWithoutInputsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutInputsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutInputsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutOutputsInput {
  create: [ProductCreateWithoutOutputsInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutOutputsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutOutputsInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateWithoutInputsDataInput {
  name: String
  introduce: String
  outputs: IndustryUpdateManyWithoutSellesInput
}

input ProductUpdateWithoutOutputsDataInput {
  name: String
  introduce: String
  inputs: IndustryUpdateManyWithoutPurchasesInput
}

input ProductUpdateWithWhereUniqueWithoutInputsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutInputsDataInput!
}

input ProductUpdateWithWhereUniqueWithoutOutputsInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutOutputsDataInput!
}

input ProductUpsertWithWhereUniqueWithoutInputsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutInputsDataInput!
  create: ProductCreateWithoutInputsInput!
}

input ProductUpsertWithWhereUniqueWithoutOutputsInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutOutputsDataInput!
  create: ProductCreateWithoutOutputsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  introduce: String
  introduce_not: String
  introduce_in: [String!]
  introduce_not_in: [String!]
  introduce_lt: String
  introduce_lte: String
  introduce_gt: String
  introduce_gte: String
  introduce_contains: String
  introduce_not_contains: String
  introduce_starts_with: String
  introduce_not_starts_with: String
  introduce_ends_with: String
  introduce_not_ends_with: String
  inputs_every: IndustryWhereInput
  inputs_some: IndustryWhereInput
  inputs_none: IndustryWhereInput
  outputs_every: IndustryWhereInput
  outputs_some: IndustryWhereInput
  outputs_none: IndustryWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
  name: String
}

type Query {
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  companyEvent(where: CompanyEventWhereUniqueInput!): CompanyEvent
  companyEvents(where: CompanyEventWhereInput, orderBy: CompanyEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyEvent]!
  companyEventsConnection(where: CompanyEventWhereInput, orderBy: CompanyEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyEventConnection!
  industry(where: IndustryWhereUniqueInput!): Industry
  industries(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry]!
  industriesConnection(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryConnection!
  industryEvent(where: IndustryEventWhereUniqueInput!): IndustryEvent
  industryEvents(where: IndustryEventWhereInput, orderBy: IndustryEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndustryEvent]!
  industryEventsConnection(where: IndustryEventWhereInput, orderBy: IndustryEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryEventConnection!
  industryInfluence(where: IndustryInfluenceWhereUniqueInput!): IndustryInfluence
  industryInfluences(where: IndustryInfluenceWhereInput, orderBy: IndustryInfluenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndustryInfluence]!
  industryInfluencesConnection(where: IndustryInfluenceWhereInput, orderBy: IndustryInfluenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryInfluenceConnection!
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword]!
  keywordsConnection(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeywordConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  research(where: ResearchWhereUniqueInput!): Research
  researches(where: ResearchWhereInput, orderBy: ResearchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Research]!
  researchesConnection(where: ResearchWhereInput, orderBy: ResearchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResearchConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Research {
  id: ID!
  desc: String!
}

type ResearchConnection {
  pageInfo: PageInfo!
  edges: [ResearchEdge]!
  aggregate: AggregateResearch!
}

input ResearchCreateInput {
  id: ID
  desc: String!
}

input ResearchCreateManyInput {
  create: [ResearchCreateInput!]
  connect: [ResearchWhereUniqueInput!]
}

type ResearchEdge {
  node: Research!
  cursor: String!
}

enum ResearchOrderByInput {
  id_ASC
  id_DESC
  desc_ASC
  desc_DESC
}

type ResearchPreviousValues {
  id: ID!
  desc: String!
}

input ResearchScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [ResearchScalarWhereInput!]
  OR: [ResearchScalarWhereInput!]
  NOT: [ResearchScalarWhereInput!]
}

type ResearchSubscriptionPayload {
  mutation: MutationType!
  node: Research
  updatedFields: [String!]
  previousValues: ResearchPreviousValues
}

input ResearchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResearchWhereInput
  AND: [ResearchSubscriptionWhereInput!]
  OR: [ResearchSubscriptionWhereInput!]
  NOT: [ResearchSubscriptionWhereInput!]
}

input ResearchUpdateDataInput {
  desc: String
}

input ResearchUpdateInput {
  desc: String
}

input ResearchUpdateManyDataInput {
  desc: String
}

input ResearchUpdateManyInput {
  create: [ResearchCreateInput!]
  update: [ResearchUpdateWithWhereUniqueNestedInput!]
  upsert: [ResearchUpsertWithWhereUniqueNestedInput!]
  delete: [ResearchWhereUniqueInput!]
  connect: [ResearchWhereUniqueInput!]
  set: [ResearchWhereUniqueInput!]
  disconnect: [ResearchWhereUniqueInput!]
  deleteMany: [ResearchScalarWhereInput!]
  updateMany: [ResearchUpdateManyWithWhereNestedInput!]
}

input ResearchUpdateManyMutationInput {
  desc: String
}

input ResearchUpdateManyWithWhereNestedInput {
  where: ResearchScalarWhereInput!
  data: ResearchUpdateManyDataInput!
}

input ResearchUpdateWithWhereUniqueNestedInput {
  where: ResearchWhereUniqueInput!
  data: ResearchUpdateDataInput!
}

input ResearchUpsertWithWhereUniqueNestedInput {
  where: ResearchWhereUniqueInput!
  update: ResearchUpdateDataInput!
  create: ResearchCreateInput!
}

input ResearchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [ResearchWhereInput!]
  OR: [ResearchWhereInput!]
  NOT: [ResearchWhereInput!]
}

input ResearchWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  CUSTOMER
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  companyEvent(where: CompanyEventSubscriptionWhereInput): CompanyEventSubscriptionPayload
  industry(where: IndustrySubscriptionWhereInput): IndustrySubscriptionPayload
  industryEvent(where: IndustryEventSubscriptionWhereInput): IndustryEventSubscriptionPayload
  industryInfluence(where: IndustryInfluenceSubscriptionWhereInput): IndustryInfluenceSubscriptionPayload
  keyword(where: KeywordSubscriptionWhereInput): KeywordSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  research(where: ResearchSubscriptionWhereInput): ResearchSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum TimeKind {
  PAST
  FUTRUE
}

type User {
  id: ID!
  username: String!
  password: String!
  role: Role!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  role: Role
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  role: Role
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
`
      }
    